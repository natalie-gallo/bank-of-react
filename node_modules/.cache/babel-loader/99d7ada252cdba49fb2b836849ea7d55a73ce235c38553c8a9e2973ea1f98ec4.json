{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar named_references_1 = require(\"./named-references\");\n\nvar numeric_unicode_map_1 = require(\"./numeric-unicode-map\");\n\nvar surrogate_pairs_1 = require(\"./surrogate-pairs\");\n\nvar allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), {\n  all: named_references_1.namedReferences.html5\n});\n\nfunction replaceUsingRegExp(macroText, macroRegExp, macroReplacer) {\n  macroRegExp.lastIndex = 0;\n  var replaceMatch = macroRegExp.exec(macroText);\n  var replaceResult;\n\n  if (replaceMatch) {\n    replaceResult = \"\";\n    var replaceLastIndex = 0;\n\n    do {\n      if (replaceLastIndex !== replaceMatch.index) {\n        replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);\n      }\n\n      var replaceInput = replaceMatch[0];\n      replaceResult += macroReplacer(replaceInput);\n      replaceLastIndex = replaceMatch.index + replaceInput.length;\n    } while (replaceMatch = macroRegExp.exec(macroText));\n\n    if (replaceLastIndex !== macroText.length) {\n      replaceResult += macroText.substring(replaceLastIndex);\n    }\n  } else {\n    replaceResult = macroText;\n  }\n\n  return replaceResult;\n}\n\nvar encodeRegExps = {\n  specialChars: /[<>'\"&]/g,\n  nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n  nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n  nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n  extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g\n};\nvar defaultEncodeOptions = {\n  mode: \"specialChars\",\n  level: \"all\",\n  numeric: \"decimal\"\n};\n\nfunction encode(text, _a) {\n  var _b = _a === void 0 ? defaultEncodeOptions : _a,\n      _c = _b.mode,\n      mode = _c === void 0 ? \"specialChars\" : _c,\n      _d = _b.numeric,\n      numeric = _d === void 0 ? \"decimal\" : _d,\n      _e = _b.level,\n      level = _e === void 0 ? \"all\" : _e;\n\n  if (!text) {\n    return \"\";\n  }\n\n  var encodeRegExp = encodeRegExps[mode];\n  var references = allNamedReferences[level].characters;\n  var isHex = numeric === \"hexadecimal\";\n  return replaceUsingRegExp(text, encodeRegExp, function (input) {\n    var result = references[input];\n\n    if (!result) {\n      var code = input.length > 1 ? surrogate_pairs_1.getCodePoint(input, 0) : input.charCodeAt(0);\n      result = (isHex ? \"&#x\" + code.toString(16) : \"&#\" + code) + \";\";\n    }\n\n    return result;\n  });\n}\n\nexports.encode = encode;\nvar defaultDecodeOptions = {\n  scope: \"body\",\n  level: \"all\"\n};\nvar strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\nvar attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\nvar baseDecodeRegExps = {\n  xml: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.xml\n  },\n  html4: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.html4\n  },\n  html5: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.html5\n  }\n};\n\nvar decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {\n  all: baseDecodeRegExps.html5\n});\n\nvar fromCharCode = String.fromCharCode;\nvar outOfBoundsChar = fromCharCode(65533);\nvar defaultDecodeEntityOptions = {\n  level: \"all\"\n};\n\nfunction getDecodedEntity(entity, references, isAttribute, isStrict) {\n  var decodeResult = entity;\n  var decodeEntityLastChar = entity[entity.length - 1];\n\n  if (isAttribute && decodeEntityLastChar === \"=\") {\n    decodeResult = entity;\n  } else if (isStrict && decodeEntityLastChar !== \";\") {\n    decodeResult = entity;\n  } else {\n    var decodeResultByReference = references[entity];\n\n    if (decodeResultByReference) {\n      decodeResult = decodeResultByReference;\n    } else if (entity[0] === \"&\" && entity[1] === \"#\") {\n      var decodeSecondChar = entity[2];\n      var decodeCode = decodeSecondChar == \"x\" || decodeSecondChar == \"X\" ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));\n      decodeResult = decodeCode >= 1114111 ? outOfBoundsChar : decodeCode > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode] || decodeCode);\n    }\n  }\n\n  return decodeResult;\n}\n\nfunction decodeEntity(entity, _a) {\n  var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level,\n      level = _b === void 0 ? \"all\" : _b;\n\n  if (!entity) {\n    return \"\";\n  }\n\n  return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\n}\n\nexports.decodeEntity = decodeEntity;\n\nfunction decode(text, _a) {\n  var _b = _a === void 0 ? defaultDecodeOptions : _a,\n      _c = _b.level,\n      level = _c === void 0 ? \"all\" : _c,\n      _d = _b.scope,\n      scope = _d === void 0 ? level === \"xml\" ? \"strict\" : \"body\" : _d;\n\n  if (!text) {\n    return \"\";\n  }\n\n  var decodeRegExp = decodeRegExps[level][scope];\n  var references = allNamedReferences[level].entities;\n  var isAttribute = scope === \"attribute\";\n  var isStrict = scope === \"strict\";\n  return replaceUsingRegExp(text, decodeRegExp, function (entity) {\n    return getDecodedEntity(entity, references, isAttribute, isStrict);\n  });\n}\n\nexports.decode = decode;","map":{"version":3,"sources":["/Users/nataliegallo/CS/webdev/bank-of-react/node_modules/html-entities/src/index.ts"],"names":["allNamedReferences","__assign","named_references_1","all","html5","replaceUsingRegExp","macroText","macroRegExp","macroReplacer","lastIndex","replaceMatch","exec","replaceResult","replaceLastIndex","index","substring","replaceInput","length","encodeRegExps","specialChars","nonAscii","nonAsciiPrintable","nonAsciiPrintableOnly","extensive","defaultEncodeOptions","mode","level","numeric","encode","text","_a","_c","_d","_e","encodeRegExp","references","characters","isHex","input","result","code","surrogate_pairs_1","charCodeAt","toString","defaultDecodeOptions","scope","strict","attribute","baseDecodeRegExps","xml","body","html4","decodeRegExps","fromCharCode","String","outOfBoundsChar","defaultDecodeEntityOptions","getDecodedEntity","entity","isAttribute","isStrict","decodeResult","decodeEntityLastChar","decodeResultByReference","decodeSecondChar","decodeCode","parseInt","substr","numeric_unicode_map_1","decodeEntity","_b","entities","decode","decodeRegExp"],"mappings":"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","sourcesContent":["import {bodyRegExps, namedReferences} from './named-references';\nimport {numericUnicodeMap} from './numeric-unicode-map';\nimport {fromCodePoint, getCodePoint} from './surrogate-pairs';\n\nconst allNamedReferences = {\n    ...namedReferences,\n    all: namedReferences.html5\n};\n\nfunction replaceUsingRegExp(macroText: string, macroRegExp: RegExp, macroReplacer: (input: string) => string): string {\n    macroRegExp.lastIndex = 0;\n    let replaceMatch = macroRegExp.exec(macroText);\n    let replaceResult;\n    if (replaceMatch) {\n        replaceResult = '';\n        let replaceLastIndex = 0;\n        do {\n            if (replaceLastIndex !== replaceMatch.index) {\n                replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);\n            }\n            const replaceInput = replaceMatch[0];\n            replaceResult += macroReplacer(replaceInput);\n            replaceLastIndex = replaceMatch.index + replaceInput.length;\n        } while ((replaceMatch = macroRegExp.exec(macroText)));\n\n        if (replaceLastIndex !== macroText.length) {\n            replaceResult += macroText.substring(replaceLastIndex);\n        }\n    } else {\n        replaceResult = macroText;\n    }\n    return replaceResult;\n}\n\nexport type Level = 'xml' | 'html4' | 'html5' | 'all';\n\ninterface CommonOptions {\n    level?: Level;\n}\n\nexport type EncodeMode = 'specialChars' | 'nonAscii' | 'nonAsciiPrintable' | 'nonAsciiPrintableOnly' | 'extensive';\n\nexport interface EncodeOptions extends CommonOptions {\n    mode?: EncodeMode;\n    numeric?: 'decimal' | 'hexadecimal';\n}\n\nexport type DecodeScope = 'strict' | 'body' | 'attribute';\n\nexport interface DecodeOptions extends CommonOptions {\n    scope?: DecodeScope;\n}\n\nconst encodeRegExps: Record<EncodeMode, RegExp> = {\n    specialChars: /[<>'\"&]/g,\n    nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n    nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n    nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n    extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g\n};\n\nconst defaultEncodeOptions: EncodeOptions = {\n    mode: 'specialChars',\n    level: 'all',\n    numeric: 'decimal'\n};\n\n/** Encodes all the necessary (specified by `level`) characters in the text */\nexport function encode(\n    text: string | undefined | null,\n    {mode = 'specialChars', numeric = 'decimal', level = 'all'}: EncodeOptions = defaultEncodeOptions\n) {\n    if (!text) {\n        return '';\n    }\n\n    const encodeRegExp = encodeRegExps[mode];\n    const references = allNamedReferences[level].characters;\n    const isHex = numeric === 'hexadecimal';\n\n    return replaceUsingRegExp(text, encodeRegExp, (input) => {\n        let result = references[input];\n        if (!result) {\n            const code = input.length > 1 ? getCodePoint(input, 0)! : input.charCodeAt(0);\n            result = (isHex ? '&#x' + code.toString(16) : '&#' + code) + ';';\n        }\n        return result;\n    });\n}\n\nconst defaultDecodeOptions: DecodeOptions = {\n    scope: 'body',\n    level: 'all'\n};\n\nconst strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\nconst attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\n\nconst baseDecodeRegExps: Record<Exclude<Level, 'all'>, Record<DecodeScope, RegExp>> = {\n    xml: {\n        strict,\n        attribute,\n        body: bodyRegExps.xml\n    },\n    html4: {\n        strict,\n        attribute,\n        body: bodyRegExps.html4\n    },\n    html5: {\n        strict,\n        attribute,\n        body: bodyRegExps.html5\n    }\n};\n\nconst decodeRegExps: Record<Level, Record<DecodeScope, RegExp>> = {\n    ...baseDecodeRegExps,\n    all: baseDecodeRegExps.html5\n};\n\nconst fromCharCode = String.fromCharCode;\nconst outOfBoundsChar = fromCharCode(65533);\n\nconst defaultDecodeEntityOptions: CommonOptions = {\n    level: 'all'\n};\n\nfunction getDecodedEntity(\n    entity: string,\n    references: Record<string, string>,\n    isAttribute: boolean,\n    isStrict: boolean\n): string {\n    let decodeResult = entity;\n    const decodeEntityLastChar = entity[entity.length - 1];\n    if (isAttribute && decodeEntityLastChar === '=') {\n        decodeResult = entity;\n    } else if (isStrict && decodeEntityLastChar !== ';') {\n        decodeResult = entity;\n    } else {\n        const decodeResultByReference = references[entity];\n        if (decodeResultByReference) {\n            decodeResult = decodeResultByReference;\n        } else if (entity[0] === '&' && entity[1] === '#') {\n            const decodeSecondChar = entity[2];\n            const decodeCode =\n                decodeSecondChar == 'x' || decodeSecondChar == 'X'\n                    ? parseInt(entity.substr(3), 16)\n                    : parseInt(entity.substr(2));\n\n            decodeResult =\n                decodeCode >= 0x10ffff\n                    ? outOfBoundsChar\n                    : decodeCode > 65535\n                    ? fromCodePoint(decodeCode)\n                    : fromCharCode(numericUnicodeMap[decodeCode] || decodeCode);\n        }\n    }\n    return decodeResult;\n}\n\n/** Decodes a single entity */\nexport function decodeEntity(\n    entity: string | undefined | null,\n    {level = 'all'}: CommonOptions = defaultDecodeEntityOptions\n): string {\n    if (!entity) {\n        return '';\n    }\n    return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\n}\n\n/** Decodes all entities in the text */\nexport function decode(\n    text: string | undefined | null,\n    {level = 'all', scope = level === 'xml' ? 'strict' : 'body'}: DecodeOptions = defaultDecodeOptions\n) {\n    if (!text) {\n        return '';\n    }\n\n    const decodeRegExp = decodeRegExps[level][scope];\n    const references = allNamedReferences[level].entities;\n    const isAttribute = scope === 'attribute';\n    const isStrict = scope === 'strict';\n\n    return replaceUsingRegExp(text, decodeRegExp, (entity) =>\n        getDecodedEntity(entity, references, isAttribute, isStrict)\n    );\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}